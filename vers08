import telebot
import random
from telebot import types
from selenium import webdriver
from selenium.webdriver.common.by import By
from email_validate import validate, validate_or_fail
import time
import re

bot = telebot.TeleBot('')

# –û—Ç–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
@bot.message_handler(content_types=["audio", "document", "photo", "sticker", "video", "video_note", "voice", "location", "contact",
                 "new_chat_members", "left_chat_member", "new_chat_title", "new_chat_photo", "delete_chat_photo",
                 "group_chat_created", "supergroup_chat_created", "channel_chat_created", "migrate_to_chat_id",
                 "migrate_from_chat_id", "pinned_message"])
def any_files(message):
    bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–æ–≤", reply_markup=markup_start)
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ "start" –∏ "help"

@bot.message_handler(commands=["start", "help"])
def start(message):
    global markup_start
    markup_start = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    item_start_1 = types.KeyboardButton("‚öôÔ∏è –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    item_start_2 = types.KeyboardButton("üìá –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç")
    item_start_3 = types.KeyboardButton("‚≠ê –ê–∫—Ü–∏–∏")
    item_start_4 = types.KeyboardButton("‚òé –ö–æ–Ω—Ç–∞–∫—Ç—ã –°–¶")
    item_start_5 = types.KeyboardButton("üìò –í—ã–ø–∏—Å–∫–∞ –ï–ì–†–Æ–õ")
    item_start_6 = types.KeyboardButton("üíª –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã")
    markup_start.add(item_start_1, item_start_2, item_start_3, item_start_4, item_start_6)
    bot.send_message(message.chat.id, '–î–æ–±—Ä—ã–π –¥–µ–Ω—å, ' + message.from_user.first_name +
                     '! \n–≠—Ç–æ –±–æ—Ç —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ \n–ê–û "–ü–§ "–°–ö–ë –ö–æ–Ω—Ç—É—Ä".'+'\n–ß–µ–º –í–∞–º –ø–æ–º–æ—á—å?', reply_markup=markup_start)
    

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(content_types=["text"])
def tp(message):
    if message.chat.type == "private":
        if message.text == "‚öôÔ∏è –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞": 
            markup_tp = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            item_tp_1 = types.KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
            item_tp_2 = types.KeyboardButton("–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            item_tp_3 = types.KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π –¥–∏—Å–∫")
            item_tp_4 = types.KeyboardButton("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
            item_tp_5 = types.KeyboardButton("–í –Ω–∞—á–∞–ª–æ –º–µ–Ω—é")
            markup_tp.add(item_tp_1, item_tp_2, item_tp_3, item_tp_4, item_tp_5)
            bot.send_message(message.chat.id, "–ö–∞–∫ –í–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏?", reply_markup=markup_tp)

        if message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù:")
            bot.register_next_step_handler(message, reg_tp)

        if message.text == "–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞":
            bot.send_message(message.chat.id, "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: \n–ø–Ω-—á—Ç —Å 9:00 –¥–æ 18:00 \n–ø—Ç —Å 9:00 –¥–æ 17:00 \n+7(347)200-80-15 \n–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä 24/7 \n8 800 500-50-80")

        if message.text == "–£—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π –¥–∏—Å–∫":
            markup_install = types.InlineKeyboardMarkup()
            install_button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –£—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π –¥–∏—Å–∫", url="https://install.kontur.ru")
            markup_install.add(install_button)
            bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π –¥–∏—Å–∫.", reply_markup=markup_install)

        if message.text == "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
            markup_faq = types.InlineKeyboardMarkup(row_width=1)
            url_button_faq_1 = types.InlineKeyboardButton(text="–¢–æ–ø‚Äë5 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–± —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏ –≤ 2022 –≥–æ–¥—É", url="https://ca.kontur.ru/articles/22128-top5_63fz_2022")
            url_button_faq_2 = types.InlineKeyboardButton(text="–ö–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å—å", url="https://ca.kontur.ru/faq/lk/prodlenie-sertifikata")
            url_button_faq_3 = types.InlineKeyboardButton(text="–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç?", url="https://ca.kontur.ru/faq/teh/nastroika-i-ustanovka")
            url_button_faq_4 = types.InlineKeyboardButton(text="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ", url="https://ca.kontur.ru/faq/teh")
            url_button_faq_5 = types.InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞ —Å –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é", url="https://ca.kontur.ru/faq/signature")
            url_button_faq_6 = types.InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞ –Ω–∞ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–∞–ª–∞—Ö", url="https://ca.kontur.ru/faq/portal")
            url_button_faq_7 = types.InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞ –≤ –ö–æ–Ω—Ç—É—Ä.–≠–∫—Å—Ç–µ—Ä–Ω", url="https://www.kontur-extern.ru/support/faq/36")
            url_button_faq_8 = types.InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞ –≤ –ö–æ–Ω—Ç—É—Ä.–î–∏–∞–¥–æ–∫", url="https://www.diadoc.ru/docs/faq")   
            markup_faq.add(url_button_faq_1, url_button_faq_2, url_button_faq_3, url_button_faq_4, url_button_faq_5, url_button_faq_6, url_button_faq_7, url_button_faq_8)
            bot.send_message(message.chat.id, "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", reply_markup=markup_faq)

        if message.text == "üìá –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç":
            markup_score = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_score_1 = types.KeyboardButton("–≠–∫—Å—Ç–µ—Ä–Ω")
            item_score_2 = types.KeyboardButton("–î–∏–∞–¥–æ–∫")
            item_score_3 = types.KeyboardButton("–§–æ–∫—É—Å")
            item_score_4 = types.KeyboardButton("–ó–∞–∫—É–ø–∫–∏")
            item_score_11 = types.KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
            item_score_12 = types.KeyboardButton("–í –Ω–∞—á–∞–ª–æ –º–µ–Ω—é")
            markup_score.add(item_score_1, item_score_2, item_score_3, item_score_4, item_score_11, item_score_12)
            bot.send_message(message.chat.id, '–ù–∞ –∫–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç?', reply_markup=markup_score)

        if message.text == "–≠–∫—Å—Ç–µ—Ä–Ω":
            global extern
            extern = message.text
            markup_reg_extern = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_reg_extern_1 = types.KeyboardButton("–û–±—Å–ª—É–∂–∏–≤–∞—é—â–∞—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è")
            item_reg_extern_2 = types.KeyboardButton("–û–¥–∏–Ω–æ—á–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è")
            markup_reg_extern.add(item_reg_extern_1, item_reg_extern_2)
            bot.send_message(message.chat.id, '–£ –í–∞—Å –æ–±—Å–ª—É–∂–∏–≤–∞—é—â–∞—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è?', reply_markup=markup_reg_extern)
            bot.register_next_step_handler(message, reg_extern_contacts)

        if message.text == "–î–∏–∞–¥–æ–∫":
            global diadoc
            diadoc = message.text
            markup_dd = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_dd_1 = types.KeyboardButton("250 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            item_dd_2 = types.KeyboardButton("600 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            item_dd_3 = types.KeyboardButton("1200 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            item_dd_4 = types.KeyboardButton("1500 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            item_dd_5 = types.KeyboardButton("2000 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            item_dd_6 = types.KeyboardButton("3000 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            item_dd_7 = types.KeyboardButton("5000 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            item_dd_8 = types.KeyboardButton("–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ –ø–æ–¥–±–æ—Ä–µ")
            markup_dd.add(item_dd_1, item_dd_2, item_dd_3, item_dd_4, item_dd_5, item_dd_6, item_dd_7, item_dd_8)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', reply_markup=markup_dd)
            bot.register_next_step_handler(message, reg_dd)

        if message.text == "–§–æ–∫—É—Å":
            global focus
            focus = message.text
            markup_focus = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_focus_1 = types.KeyboardButton("–ë–∏–∑–Ω–µ—Å")
            item_focus_2 = types.KeyboardButton("–ü—Ä–µ–º–∏—É–º")
            item_focus_3 = types.KeyboardButton("–ü—Ä–µ–º–∏—É–º +")
            markup_focus.add(item_focus_1, item_focus_2, item_focus_3)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω", reply_markup=markup_focus)
            bot.register_next_step_handler(message, reg_focus)

        if message.text == "–ó–∞–∫—É–ø–∫–∏":
            global zakupki
            zakupki = message.text
            markup_reg_zakupki = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_zakupki_1 = types.KeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç")
            item_zakupki_2 = types.KeyboardButton("–≠–∫—Å–ø–µ—Ä—Ç")
            item_zakupki_3 = types.KeyboardButton("–ö–æ–º–∞–Ω–¥–Ω—ã–π")
            markup_reg_zakupki.add(item_zakupki_1, item_zakupki_2, item_zakupki_3)
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω", reply_markup=markup_reg_zakupki)
            bot.register_next_step_handler(message, reg_zakupki_tarif)
            
        if message.text == '‚òé –ö–æ–Ω—Ç–∞–∫—Ç—ã –°–¶': 
            markup_info = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_info_1 = types.KeyboardButton("/help")
            markup_info.add(item_info_1)
            bot.send_message(message.chat.id, '–ê–¥—Ä–µ—Å: –≥. –£—Ñ–∞, —É–ª. –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è, \n–¥. 165/3, –æ—Ñ–∏—Å 803 \n—Ç–µ–ª–µ—Ñ–æ–Ω: +7(347)200-80-15 \nEmail: mail@kontur-02.ru \n\nhttps://2gis.ru/ufa/inside/2393172957224022/firm/70000001022797956?m=56.027967%2C54.76622%2F16.39 \n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–∞—á–∞–ª–æ –≤–≤–µ–¥–∏—Ç–µ /help', reply_markup=markup_info)

        if message.text == "‚≠ê –ê–∫—Ü–∏–∏":
            markup_action = types.InlineKeyboardMarkup(row_width=1)
            url_button_action_1 = types.InlineKeyboardButton(text="–ê–∫—Ü–∏–∏ –ö–æ–Ω—Ç—É—Ä.–≠–∫—Å—Ç–µ—Ä–Ω", url="https://www.kontur-extern.ru/news/actions")
            url_button_action_2 = types.InlineKeyboardButton(text="–ê–∫—Ü–∏–∏ –ö–æ–Ω—Ç—É—Ä.–î–∏–∞–¥–æ–∫", url="https://kontur.ru/diadoc/actions/313")
            markup_action.add(url_button_action_1, url_button_action_2)
            bot.send_message(message.chat.id, "–ê–∫—Ü–∏–∏ –°–ö–ë –ö–æ–Ω—Ç—É—Ä", reply_markup=markup_action)

        if message.text == "üìò –í—ã–ø–∏—Å–∫–∞ –ï–ì–†–Æ–õ":
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–∏—Å–∫—É –ï–ì–†–Æ–õ")
            bot.register_next_step_handler(message, egrul)

        if message.text == "üíª –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã":
            markup_service = types.InlineKeyboardMarkup(row_width=1)
            url_button_service_1 = types.InlineKeyboardButton(text="–≠–∫—Å—Ç–µ—Ä–Ω - –û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", url="https://kontur.ru/extern?p=3933")
            url_button_service_2 = types.InlineKeyboardButton(text="–î–∏–∞–¥–æ–∫ - –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç —Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º–∏", url="https://kontur.ru/diadoc?p=3933")
            url_button_service_3 = types.InlineKeyboardButton(text="–§–æ–∫—É—Å - –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤", url="https://kontur.ru/focus?p=3933")
            url_button_service_4 = types.InlineKeyboardButton(text="–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è - –û–Ω–ª–∞–π–Ω‚Äë–±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞", url="https://kontur.ru/bk?p=3933")
            url_button_service_5 = types.InlineKeyboardButton(text="–ù–æ—Ä–º–∞—Ç–∏–≤ - –°–ø—Ä–∞–≤–æ—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞", url="https://kontur.ru/normativ/order?p=3933")
            url_button_service_6 = types.InlineKeyboardButton(text="–ó–∞–∫—É–ø–∫–∏ - –ü–æ–∏—Å–∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–∫—É–ø–æ–∫", url="https://kontur.ru/zakupki?p=3933")
            url_button_service_7 = types.InlineKeyboardButton(text="–ö–æ–º–ø–∞—Å - –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞", url="https://kontur.ru/compass?p=3933")
            url_button_service_8 = types.InlineKeyboardButton(text="–ú–∞—Ä–∫–µ—Ç - –£—á–µ—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏ –∫–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", url="https://kontur.ru/market?p=3933")
            url_button_service_9 = types.InlineKeyboardButton(text="–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏", url="https://kontur.ru/markirovka?p=3933")
            url_button_service_10 = types.InlineKeyboardButton(text="–û–§–î - –£–¥–æ–±–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", url="https://kontur.ru/ofd?p=3933")
            url_button_service_11 = types.InlineKeyboardButton(text="–¢—Ä–µ–≤–µ–ª - –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞–º–∏ –≤ –æ–¥–Ω–æ–º –æ–∫–Ω–µ", url="https://kontur.ru/travel?p=3933")
            url_button_service_12 = types.InlineKeyboardButton(text="–≠–ª—å–±–∞ - –û–Ω–ª–∞–π–Ω‚Äë–±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è –¥–ª—è –ò–ü –∏ –û–û–û –Ω–∞ –£–°–ù –∏ –ø–∞—Ç–µ–Ω—Ç–µ", url="https://kontur.ru/elba?p=3933")
            markup_service.add(url_button_service_1, url_button_service_2, url_button_service_3, url_button_service_4, url_button_service_5, url_button_service_6, url_button_service_7, url_button_service_8,
                               url_button_service_9, url_button_service_10, url_button_service_11, url_button_service_12)
            bot.send_message(message.chat.id, "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã", reply_markup=markup_service)            

        if message.text == "–î–∞":
            bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. \n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–∞—á–∞–ª–æ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ \n/start')

        if message.text == "–ù–µ—Ç":
            bot.send_message(message.chat.id, '–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ: \n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–∞—á–∞–ª–æ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ \n/start')

        if message.text == "–í –Ω–∞—á–∞–ª–æ –º–µ–Ω—é":
            bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ –º–µ–Ω—é", reply_markup=markup_start)
            bot.register_next_step_handler(message, start)
            
#–ó–∞—è–≤–∫–∞ –≤ –¢–ü
#–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ù–ù - —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ª–∏–±–æ 10, –ª–∏–±–æ 12 —Å–∏–º–≤–æ–ª–æ–≤
def reg_tp(message):
    global inn_tp
    inn_tp = message.text
    if inn_tp == "/start" or inn_tp == "/help" or inn_tp == "–í –Ω–∞—á–∞–ª–æ –º–µ–Ω—é":
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ –º–µ–Ω—é", reply_markup=markup_start)
        bot.register_next_step_handler(message, start)
    else:
        if inn_tp.isdigit():
            if len(inn_tp) == 10 or len(inn_tp) == 12:
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:")
                bot.register_next_step_handler(message, reg_email_tp)
            else:
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù:")
                bot.register_next_step_handler(message, reg_tp)
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù:")
            bot.register_next_step_handler(message, reg_tp)
            
#–ü—Ä–æ–≤–µ—Ä–∫–∞ email –ø–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—é (string1)@(string2).(2+characters)        
def reg_email_tp(message):
    global email_tp
    email_tp = str(message.text)
    if email_tp == "/start" or inn_tp == "/help":
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ –º–µ–Ω—é", reply_markup=markup_start)
        bot.register_next_step_handler(message, start)
    else:
        test_email_tp = re.compile(r'([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\.[A-Z|a-z]{2,})+')
        if re.fullmatch(test_email_tp, email_tp):
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            bot.register_next_step_handler(message, reg_phone_tp)
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:")
            bot.register_next_step_handler(message, reg_email_tp)
        
def reg_phone_tp(message):
    global phone_tp
    phone_tp = str(message.text)
    if phone_tp.isdigit():
        if len(phone_tp) >= 6 and len(phone_tp) <= 12:
            markup_yes_tp= types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_yes_tp = types.KeyboardButton("–î–∞")
            item_no_tp = types.KeyboardButton("–ù–µ—Ç")
            markup_yes_tp.add(item_yes_tp, item_no_tp)
            bot.send_message(message.chat.id, message.from_user.first_name + ", –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º, \n–í–∞—à –ò–ù–ù: " + inn_tp + " \n–í–∞—à e-mail: " + email_tp +
                            "\n–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: " + phone_tp + "?", reply_markup=markup_yes_tp)
            bot.send_message(-1001736886222, "–ó–∞—è–≤–∫–∞ –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ–∂–∫—É: \n{0}\n–∏–º—è - {1}\n–Ω–∏–∫ - @{2}\n–∏–Ω–Ω - {3}\n–ø–æ—á—Ç–∞ - {4}\n—Ç–µ–ª–µ—Ñ–æ–Ω - {5}"
                            .format(message.chat.id, message.from_user.first_name, message.from_user.username, inn_tp, email_tp, phone_tp))
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            bot.register_next_step_handler(message, reg_phone_tp)
   
#–ó–∞—è–≤–∫–∞ –≠–∫—Å—Ç–µ—Ä–Ω
def reg_extern_contacts(message):
    if message.text in ["–û–±—Å–ª—É–∂–∏–≤–∞—é—â–∞—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", "–û–¥–∏–Ω–æ—á–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"]:
        global ob
        ob = message.text
        markup_3_2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item_3_2_1 = types.KeyboardButton("–û–±—â–∞—è")
        item_3_2_2 = types.KeyboardButton("–£–°–ù, –ü–∞—Ç–µ–Ω—Ç")
        markup_3_2.add(item_3_2_1, item_3_2_2)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è', reply_markup=markup_3_2)
        bot.register_next_step_handler(message, reg_sno_extern)

def reg_sno_extern(message):
    if message.text in ["–û–±—â–∞—è", "–£–°–ù, –ü–∞—Ç–µ–Ω—Ç"]:
        global sno
        sno = message.text
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù:')
        bot.register_next_step_handler(message, reg_inn_extern)

def reg_inn_extern(message):
    global inn_extern
    inn_extern = message.text
    if inn_extern.isdigit():
        if len(inn_extern) == 10 or len(inn_extern) == 12:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:")
            bot.register_next_step_handler(message, reg_email_extern)
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù:")
            bot.register_next_step_handler(message, reg_inn_extern)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù:")
        bot.register_next_step_handler(message, reg_inn_extern)
        return

def reg_email_extern(message):
    global email_extern
    email_extern = str(message.text)
    test_email_extern = re.compile(r'([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\.[A-Z|a-z]{2,})+')
    if re.fullmatch(test_email_extern, email_extern):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
        bot.register_next_step_handler(message, reg_phone_extern)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:")
        bot.register_next_step_handler(message, reg_email_extern)

def reg_phone_extern(message):
    global phone_extern
    phone_extern = str(message.text)
    if phone_extern.isdigit():
        if len(phone_extern) >= 6 and len(phone_extern) <= 12:
            markup_yes_tp= types.ReplyKeyboardMarkup(resize_keyboard=True)
            item_yes_tp = types.KeyboardButton("–î–∞")
            item_no_tp = types.KeyboardButton("–ù–µ—Ç")
            markup_yes_tp.add(item_yes_tp, item_no_tp)
            bot.send_message(message.chat.id, message.from_user.first_name + ", –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º, \n–í–∞—à –ò–ù–ù: " + inn_extern + " \n–í–∞—à e-mail: " + email_extern +
                             "\n–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: " + phone_extern + "?", reply_markup=markup_yes_tp)
            bot.send_message(-1001736886222, "–ó–∞—è–≤–∫–∞ –ø–æ –≠–∫—Å—Ç–µ—Ä–Ω—É: \n{0}\n–∏–º—è - {1}\n–Ω–∏–∫ - @{2}\n–∏–Ω–Ω - {3}\n–ø–æ—á—Ç–∞ - {4}\n—Ç–µ–ª–µ—Ñ–æ–Ω - {5}\n—Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ - {6}\n–°–ù–û - {7}"
                              .format(message.chat.id, message.from_user.first_name, message.from_user.username, inn_extern, email_extern, phone_extern, ob, sno))
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            bot.register_next_step_handler(message, reg_phone_extern)
            return
            
    else:   
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        bot.register_next_step_handler(message, reg_phone_extern)
        return
   
#–ó–∞—è–≤–∫–∞ –î–∏–∞–¥–æ–∫
def reg_dd(message):
    global package
    package = str(message.text)
    markup_dd_int = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_dd_int_1 = types.KeyboardButton("–î–∞, —É –º–µ–Ω—è 1–°")
    item_dd_int_2 = types.KeyboardButton("–î–∞, —É –º–µ–Ω—è –¥—Ä—É–≥–∞—è —É—á–µ—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    item_dd_int_3 = types.KeyboardButton("–ù–µ—Ç, —Ç–æ–ª—å–∫–æ –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    markup_dd_int.add(item_dd_int_1, item_dd_int_2, item_dd_int_3)
    bot.send_message(message.from_user.id, "–í–∞–º –Ω—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —É—á—ë—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π?", reply_markup=markup_dd_int) 
    bot.register_next_step_handler(message, reg_integration_dd)

def reg_integration_dd(message):
    global integration_dd
    integration_dd = str(message.text)
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù: ")
    bot.register_next_step_handler(message, reg_inn_dd)

def reg_inn_dd(message):
    global inn_dd
    inn_dd = message.text
    if inn_dd.isdigit():
        if len(inn_dd) == 10 or len(inn_dd) == 12:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:")
            bot.register_next_step_handler(message, reg_email_dd)
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù:")
            bot.register_next_step_handler(message, reg_inn_dd)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù:")
        bot.register_next_step_handler(message, reg_inn_dd)
        return

def reg_email_dd(message):
    global email_dd
    email_dd = str(message.text)
    test_email_dd = re.compile(r'([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\.[A-Z|a-z]{2,})+')
    if re.fullmatch(test_email_dd, email_dd):
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(message, reg_phone_dd)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:")
        bot.register_next_step_handler(message, reg_email_dd)

def reg_phone_dd(message):
    global phone_dd
    phone_dd = message.text
    if phone_dd.isdigit():
        if len(phone_dd) >= 6 and len(phone_dd) <= 12:
            markup4 = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item11 = types.KeyboardButton("–î–∞")
            item12 = types.KeyboardButton("–ù–µ—Ç")
            markup4.add(item11, item12)
            bot.send_message(message.from_user.id, message.from_user.first_name + ', –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º, \n–í–∞—à –ò–ù–ù: ' + inn_dd + ' \n–í–∞—à e-mail: '
                             + email_dd + '\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:' + phone_dd +'?', reply_markup=markup4)
            bot.send_message (-1001736886222, " –ó–∞—è–≤–∫–∞ –ø–æ –î–∏–∞–¥–æ–∫—É: \n{0}\n–∏–º—è - {1}\n–Ω–∏–∫ - @{2}\n–∏–Ω–Ω - {3}\n–ø–æ—á—Ç–∞ - {4}\n—Ç–µ–ª–µ—Ñ–æ–Ω - {5}\n–ø–∞–∫–µ—Ç - {6}\n–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è -{7}"
                              .format(message.chat.id, message.from_user.first_name, message.from_user.username, inn_dd, email_dd, phone_dd, package, integration_dd))
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            bot.register_next_step_handler(message, reg_phone_dd)
            return        
    else:   
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        bot.register_next_step_handler(message, reg_phone_dd)
        return

#–ó–∞—è–≤–∫–∞ –§–æ–∫—É—Å
def reg_focus(message):
    global focus_user
    focus_user = str(message.text)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù: ')
    bot.register_next_step_handler(message, reg_inn_focus)

def reg_inn_focus(message):
    global inn_focus
    inn_focus = message.text
    if inn_focus.isdigit():
        if len(inn_focus) == 10 or len(inn_focus) == 12:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:")
            bot.register_next_step_handler(message, reg_email_focus)
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù:")
            bot.register_next_step_handler(message, reg_inn_focus)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù:")
        bot.register_next_step_handler(message, reg_inn_focus)
        return

def reg_email_focus(message):
    global email_focus
    email_focus = str(message.text)
    test_email_focus = re.compile(r'([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\.[A-Z|a-z]{2,})+')
    if re.fullmatch(test_email_focus, email_focus):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
        bot.register_next_step_handler(message, reg_phone_focus)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:")
        bot.register_next_step_handler(message, reg_email_focus)

def reg_phone_focus(message):
    global phone_focus
    phone_focus = message.text
    if phone_focus.isdigit():
        if len(phone_focus) >= 6 and len(phone_focus) <= 12:
            markup4 = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item11 = types.KeyboardButton("–î–∞")
            item12 = types.KeyboardButton("–ù–µ—Ç")
            markup4.add(item11, item12)
            bot.send_message(message.from_user.id, message.from_user.first_name + ', –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º, \n–í–∞—à –ò–ù–ù: ' + inn_focus + ' \n–í–∞—à e-mail: '
                             + email_focus + '\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:' + phone_focus +'?', reply_markup=markup4)
            bot.send_message(-1001736886222, "–ó–∞—è–≤–∫–∞ –ø–æ –§–æ–∫—É—Å—É: \n{0}\n–∏–º—è - {1}\n–Ω–∏–∫ - @{2}\n–∏–Ω–Ω - {3}\n–ø–æ—á—Ç–∞ - {4}\n—Ç–µ–ª–µ—Ñ–æ–Ω - {5}\n–¢–∞—Ä–∏—Ñ - {6}"
                          .format(message.chat.id, message.from_user.first_name, message.from_user.username, inn_focus, email_focus, phone_focus, focus_user))
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            bot.register_next_step_handler(message, reg_phone_focus)
            return        
    else:   
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        bot.register_next_step_handler(message, reg_phone_focus)
        return

#–ó–∞—è–≤–∫–∞ –ó–∞–∫—É–ø–∫–∏    
def reg_zakupki_tarif(message):
    global zakupki_tarif
    zakupki_tarif = message.text
    markup_zakupki_1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_zakupki_12m = types.KeyboardButton("12 –º–µ—Å—è—Ü–µ–≤")
    item_zakupki_15m = types.KeyboardButton("15 –º–µ—Å—è—Ü–µ–≤")
    item_zakupki_24m = types.KeyboardButton("24 –º–µ—Å—è—Ü–∞")
    markup_zakupki_1.add(item_zakupki_12m, item_zakupki_15m, item_zakupki_24m)
    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", reply_markup=markup_zakupki_1) 
    bot.register_next_step_handler(message, reg_zakupki_period)

def reg_zakupki_period(message):
    global zakupki_period
    zakupki_period = str(message.text)
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù: ")
    bot.register_next_step_handler(message, reg_inn_zakupki)

def reg_inn_zakupki(message):
    global inn_zakupki
    inn_zakupki = message.text
    if inn_zakupki.isdigit():
        if len(inn_zakupki) == 10 or len(inn_zakupki) == 12:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:")
            bot.register_next_step_handler(message, reg_email_zakupki)
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù:")
            bot.register_next_step_handler(message, reg_inn_zakupki)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù:")
        bot.register_next_step_handler(message, reg_inn_zakupki)
        return

def reg_email_zakupki(message):
    global email_zakupki
    email_zakupki = str(message.text)
    test_email_zakupki = re.compile(r'([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\.[A-Z|a-z]{2,})+')
    if re.fullmatch(test_email_zakupki, email_zakupki):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
        bot.register_next_step_handler(message, reg_phone_zakupki)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:")
        bot.register_next_step_handler(message, reg_email_zakupki)

def reg_phone_zakupki(message):
    global phone_zakupki
    phone_zakupki = message.text
    if phone_zakupki.isdigit():
        if len(phone_zakupki) >= 6 and len(phone_zakupki) <= 12:
            markup4 = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item11 = types.KeyboardButton("–î–∞")
            item12 = types.KeyboardButton("–ù–µ—Ç")
            markup4.add(item11, item12)
            bot.send_message(message.from_user.id, message.from_user.first_name + ', –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º, \n–í–∞—à –ò–ù–ù: ' + inn_zakupki + ' \n–í–∞—à e-mail: '
                             + email_zakupki + '\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:' + phone_zakupki +'?', reply_markup=markup4)
            bot.send_message(-1001736886222, "–ó–∞—è–≤–∫–∞ –ø–æ –ó–∞–∫—É–ø–∫–∞–º: \n{0}\n–∏–º—è - {1}\n–Ω–∏–∫ - @{2}\n–∏–Ω–Ω - {3}\n–ø–æ—á—Ç–∞ - {4}\n—Ç–µ–ª–µ—Ñ–æ–Ω - {5}\n–¢–∞—Ä–∏—Ñ - {6}\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è - {7}"
                          .format(message.chat.id, message.from_user.first_name, message.from_user.username, inn_zakupki, email_zakupki, phone_zakupki, zakupki_tarif, zakupki_period))
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            bot.register_next_step_handler(message, reg_phone_zakupki)
            return        
    else:   
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        bot.register_next_step_handler(message, reg_phone_zakupki)
        return    

#–ü–æ–ª—É—á–∏—Ç—å –≤—ã–ø–∏—Å–∫—É –ï–ì–†–Æ–õ
def egrul(message):
    global inn_egrul
    inn_egrul = str(message.text)
    url = "https://egrul.nalog.ru/index.html"
    options = webdriver.ChromeOptions()
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    options.add_argument("--disable-blink-features=AutomationControlled")
    web = webdriver.Chrome(options=options, executable_path="C:\\Users\\–ê–ª–µ–∫—Å–µ–π\\Desktop\\–ë–æ—Ç\\–ë–æ—Ç\\application\\chromedriver.exe")
    web.maximize_window()
    web.get(url=url)
    time.sleep(5)
    web.find_element(By.XPATH, '//*[@id="query"]').click()
    source = web.find_element(By.XPATH, "//input[@class='form-control']")
    object_1.send_keys(inn_egrul)
    time.sleep(5)
    web.find_element(By.XPATH, '//*[@id="resultContent"]/div/div[3]/button').click()
    

bot.polling(none_stop=True, interval=1, timeout=0)
            

